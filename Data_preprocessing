# tidyr, dplyr 패키지 설치
install.packages("tidyr")
library(tidyr)
install.packages("dplyr")
library(dplyr)

# family, namef, agef, namem, agem 행렬 
member <- data.frame(family=c(1,2,3), namef=c("aaa","bbb","ccc"),
                     agef=c(20,30,40),namem=c("ddd","eee","fff"),
                     agem=c(34,23,45))
member

a <-gather(member, key, value, namef:agem)                         # member 행렬중 namef ~ agem 까지 key, value로 행렬 생성
a
b <-separate(a,key, c("variable","type"), 1)                       # a의 value 를 variable, type 으로 구분  
b
b <-separate(a,key, c("variable","type"), 4)
b
b <-separate(a,key, c("variable","type"), -1)
b
new <- spread(b,variable,value)
new

member <- data.frame(family=c(1,2,3), namef=c("aaa","bbb","ccc"),
                     agef=c(20,30,40), namem=c("ddd","eee","fff"),
                     agem=c(34,23,45))
member

new2 <- member %>%
  gather(key, value, namef:agem) %>%
  separate(key, c("variable","type"), -1) %>%
  spread(variable, value)
new2

filter(new2, type=="f")
new2 %>% filter(type=="f")

filter(new2, age >=30)
new2 %>% filter(age >=30)


new2 %>% filter(type=="f" & age>=30)                                # type이 'f' 이고 age >= 30이상인 경우
new2 %>% filter(type=="m" & age>=30)

new2 %>% filter(type=="f" | age>=30)                                # type이 'f' 이거나 age >= 30이상인 경우
new2 %>% filter(type=="m" | age>=30)

new2 %>% filter(family==1 | family==2)                              # family 1 이거나 2
new2 %>% filter(family==1 | family==2 | family==3)

new2 %>% filter(family %in% c(1,2))
new2 %>% filter(family %in% c(1:3))                                 # family 1 에서 3까지 포함

family1 <- new2 %>% filter(family == 1)
family2 <- new2 %>% filter(family %in% c(2,3))

family1
family2

new2 %>% select(name)                                               # 한 개 변수 추출
new2 %>% select(type, age)                                          # 여러 변수 추출
new2 %>% select(-age)                                               # 한 변수제외
new2 %>% select(-age,-type)                                         # 여러 변수제외

# filter(), select() 함수 조합
new2 %>% filter(type=="f") %>% select(-age)                         # type이 'f' 이고 age 변수제외
new2 %>% filter(type=="f") %>% select(-age) %>% head(1)             # type이 'f' 이고 age 변수제외, 1 line만 출력

# 순서대로 정렬
new2 %>% arrange(age)                                               # age로 오름차순 정렬
new2 %>% arrange(desc(age))                                         # age로 내림차순 정렬
new2 %>% arrange(family, age)

# excel or csv 파일 로드
exam <- read.csv("excel_exam.csv")
exam

exam %>%                                                            # total이라는 파생변수 추가
  mutate(total = math+english) %>% head

exam %>%                                                            # total, mean등 여러 파생변수 추가
  mutate(total = math+english,                                      # 총합
         mean = (math + english)/2 ) %>%                            # 평균
  head

exam %>%                                                            # mutate() , ifelse() 적용
  mutate(test = ifelse(math >=60,"pass", "fail")) %>% head

exam %>%
  mutate(total = math+english) %>%
  arrange(total) %>% head

## 집단별 데이터 요약
exam %>% summarise(mean_math = mean(math))

exam %>%                                                            # 집단별 데이터 요약
  group_by(class) %>%                                               # class 별로 분리
  summarise(mean_math = mean(math),                                 # math의 평균
            sum_math = sum(math),                                   # math 합계
            median_math = median(math),                             # math 중앙값
            n=n()) 

# 집단별로 다시 집단 나누기
library(ggplot2)
mpg %>%
  group_by(manufacturer, drv) %>%                                   # 회사별, 구동 방식별 분리
  summarise(mean_cty = mean(cty)) %>%                               # cty 평균 산출
  head(10)

## dplyr 조합
mpg %>%
  group_by(manufacturer) %>%                                        # 회사별 분리
  filter(class == "suv") %>%                                        # suv 추출
  mutate(tot = (cty+hwy)/2) %>%                                     # 통합 연비 생성
  summarise(mean_tot = mean(tot)) %>%                               # 통합 연비 평균 생성
  arrange(desc(mean_tot)) %>%                                       # 내림차순으로 정렬
  head(5)

## 데이터 합치기
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1:5),
                    midterm = c(60,80,70,90,75))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1:5),
                    final = c(70,83,65,95,80))
# left_join 데이터 합치기
total <- left_join(test1,test2, by = "id")                           # id를 기준으로 데이터 합치기
total
